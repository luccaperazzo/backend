const mongoose = require('mongoose');
const bcrypt   = require('bcryptjs');

const BARRIOS_CABA = [
  "Almagro", "Balvanera", "Barracas", "Belgrano", "Boedo",
  "Caballito", "Chacarita", "Coghlan", "Colegiales", "Constituci칩n",
  "Flores", "Floresta", "La Boca", "La Paternal", "Liniers", "Mataderos",
  "Monserrat", "Monte Castro", "Nueva Pompeya", "Nu침ez", "Palermo",
  "Parque Avellaneda", "Parque Chacabuco", "Parque Chas", "Parque Patricios",
  "Puerto Madero", "Recoleta", "Retiro", "Saavedra", "San Crist칩bal",
  "San Nicol치s", "San Telmo", "V칠lez Sarsfield", "Versalles", "Villa Crespo",
  "Villa del Parque", "Villa Devoto", "Villa Gral. Mitre", "Villa Lugano",
  "Villa Luro", "Villa Ort칰zar", "Villa Pueyrred칩n", "Villa Real",
  "Villa Riachuelo", "Villa Santa Rita", "Villa Soldati", "Villa Urquiza"
];

const IDIOMAS_ENUM = ["Espa침ol", "Ingl칠s", "Portugu칠s"];


const userSchema = new mongoose.Schema({
  nombre:          { 
    type: String, 
    required: [true, 'El nombre es obligatorio.'],
    maxlength: [50, 'El nombre no puede superar los 50 caracteres.']
  },
  apellido:        { 
    type: String, 
    required: [true, 'El apellido es obligatorio.'],
    maxlength: [50, 'El apellido no puede superar los 50 caracteres.']
  },
  email:           { 
    type: String, 
    required: [true, 'El email es obligatorio.'], 
    unique: true,
    maxlength: [100, 'El email no puede superar los 100 caracteres.']
  },
  password:        { type: String, required: [true, 'La contrase침a es obligatoria.'] },
  fechaNacimiento: { 
    type: Date,   
    required: [true, 'La fecha de nacimiento es obligatoria.'],
    validate: {
      validator: function(value) {
        if (!value) return false;
        const today = new Date();
        const minDate = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
        return value <= minDate;
      },
      message: 'Debes tener al menos 18 a침os para registrarte.'
    }
  },
  role:            { type: String, enum: ['cliente', 'entrenador'], default: 'cliente', required: [true, 'El rol es obligatorio.'] },
  resetToken: String,
  resetTokenExpires: Date,
  avatarUrl: { type: String, default: null },


  // Campos exclusivos para entrenadores:
  zona: {
    type: String,
    enum: BARRIOS_CABA,
    required: [function() { return this.role === 'entrenador'; }, 'La zona es obligatoria para entrenadores.']
  },  presentacion: {
    type: String,
    required: [function() { return this.role === 'entrenador'; }, 'La presentaci칩n es obligatoria para entrenadores.'],
    minlength: [10, 'La presentaci칩n debe tener al menos 10 caracteres.'],
    maxlength: [200, 'La presentaci칩n no puede superar los 200 caracteres.']
  },
  idiomas: {
    type: [String],
    enum: IDIOMAS_ENUM,  // 游녣 Restringe los valores permitidos
    required: [function() { return this.role === 'entrenador'; }, 'Debes indicar al menos un idioma.'], // Este mensaje aparece cuando el campo directamente no est치
    validate: {
      validator: function(arr) {
        if (this.role !== 'entrenador') return true;
        return Array.isArray(arr) && arr.length > 0;
      },
      message: 'Un entrenador debe indicar al menos un idioma.' // Este mensaje aparecer치 si el campo est치 vac칤o, es decir si idiomas = []
    }
  },
}, { timestamps: true });

// Antes de guardar, encriptar la contrase침a
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Comparar contrase침a en login
userSchema.methods.comparePassword = function(candidate) {
  return bcrypt.compare(candidate, this.password);
};

module.exports = mongoose.model('User', userSchema);
